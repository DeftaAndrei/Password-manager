import tkinter as tk
from tkinter import messagebox
from cryptography.fernet import Fernet
import os
import json
import random
import string

# Constants
FILE_NAME = "passwords.enc"
KEY_FILE = "key.key"

# Generate or load encryption key
def load_key():
    if not os.path.exists(KEY_FILE):
        key = Fernet.generate_key()
        with open(KEY_FILE, 'wb') as key_file:
            key_file.write(key)
    else:
        with open(KEY_FILE, 'rb') as key_file:
            key = key_file.read()
    return key

def encrypt_data(data, key):
    fernet = Fernet(key)
    return fernet.encrypt(data.encode())

def decrypt_data(data, key):
    fernet = Fernet(key)
    return fernet.decrypt(data).decode()

def save_passwords(data, key):
    encrypted_data = encrypt_data(json.dumps(data), key)
    with open(FILE_NAME, 'wb') as file:
        file.write(encrypted_data)

def load_passwords(key):
    if not os.path.exists(FILE_NAME):
        return {}
    with open(FILE_NAME, 'rb') as file:
        encrypted_data = file.read()
    return json.loads(decrypt_data(encrypted_data, key))

# Generate a strong password
def generate_password(length=36):
    characters = string.ascii_letters + string.digits + string.punctuation
    return ''.join(random.choice(characters) for _ in range(length))

# GUI application
class PasswordManagerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Password Manager")

        self.key = load_key()
        self.passwords = load_passwords(self.key)

        self.setup_ui()

    def setup_ui(self):
        tk.Label(self.root, text="Website/Account:").grid(row=0, column=0, padx=10, pady=10)
        self.website_entry = tk.Entry(self.root, width=30)
        self.website_entry.grid(row=0, column=1, padx=10, pady=10)

        self.save_button = tk.Button(self.root, text="Save", command=self.save_password, bg="blue", fg="white")
        self.save_button.grid(row=0, column=2, padx=10, pady=10)

        tk.Label(self.root, text="Username/Email:").grid(row=1, column=0, padx=10, pady=10)
        self.username_entry = tk.Entry(self.root, width=30)
        self.username_entry.grid(row=1, column=1, padx=10, pady=10)

        self.show_button = tk.Button(self.root, text="Show Passwords", command=self.show_passwords, bg="blue", fg="white")
        self.show_button.grid(row=1, column=2, padx=10, pady=10)

        tk.Label(self.root, text="Password:").grid(row=2, column=0, padx=10, pady=10)
        self.password_entry = tk.Entry(self.root, width=30)
        self.password_entry.grid(row=2, column=1, padx=10, pady=10)

        self.generate_button = tk.Button(self.root, text="Generate", command=self.generate_password_ui, bg="blue", fg="white")
        self.generate_button.grid(row=2, column=2, padx=10, pady=10)

    def generate_password_ui(self):
        password = generate_password()
        self.password_entry.delete(0, tk.END)
        self.password_entry.insert(0, password)

    def save_password(self):
        website = self.website_entry.get()
        username = self.username_entry.get()
        password = self.password_entry.get()

        if not website or not username or not password:
            messagebox.showwarning("Warning", "All fields must be filled!")
            return

        self.passwords[website] = {"username": username, "password": password}
        save_passwords(self.passwords, self.key)
        messagebox.showinfo("Success", "Password saved successfully!")

    def show_passwords(self):
        passwords_window = tk.Toplevel(self.root)
        passwords_window.title("Saved Passwords")

        for i, (website, creds) in enumerate(self.passwords.items(), start=1):
            tk.Label(passwords_window, text=f"{i}. {website}").grid(row=i, column=0, padx=10, pady=5)
            tk.Label(passwords_window, text=f"Username: {creds['username']} | Password: {creds['password']}").grid(row=i, column=1, padx=10, pady=5)
            copy_button = tk.Button(passwords_window, text="Copy", command=lambda p=creds['password']: self.copy_to_clipboard(p), bg="blue", fg="white")
            copy_button.grid(row=i, column=2, padx=10, pady=5)

    def copy_to_clipboard(self, password):
        if password:
            self.root.clipboard_clear()
            self.root.clipboard_append(password)
            self.root.update()  # now it stays on the clipboard
            messagebox.showinfo("Copied", "Password copied to clipboard!")

if __name__ == "__main__":
    root = tk.Tk()
    app = PasswordManagerApp(root)
    root.mainloop()
